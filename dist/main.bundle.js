!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=17)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.OutputResult=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.output=t}return r(e,[{key:"outputRun",value:function(e){switch(e){case 1:this.output.innerHTML="<p>The triangle is equilateral</p>";break;case 2:this.output.innerHTML="<p>The triangle is isosceles</p>";break;case 3:this.output.innerHTML="<p>The triangle is scalene</p>";break;default:this.output.innerHTML="<p>How did you do this?</p>"}}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.Validations=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"triangleValidation",value:function(e,t,n){if(this.validationRangeUnder(e,t),this.validationValueMissing(e,t,n),!this.validationValid(e,t))return!0}},{key:"validationRangeUnder",value:function(e,t){e.validity.rangeUnderflow&&(e.className="lineError",t.innerHTML='<i class="material-icons">report_problem</i> The value should be more then 0',t.className="error active")}},{key:"validationValueMissing",value:function(e,t,n){e.validity.valueMissing&&(e.className="lineError",t.innerHTML='<i class="material-icons">report_problem</i> '+n+" is required, darling!",t.className="error active")}},{key:"validationValid",value:function(e,t){if(e.validity.valid)return e.className="",t.innerHTML='<i class="material-icons">check_circle</i> Success!',t.className="error success",!0}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Listeners=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),o=n(0);t.Listeners=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sideArray=[],this.sideSet=new Set,this.submitPass=!0,this.form=t,this.output=n.getElementsByTagName("div")[0],this.sideArray=[{side:this.form.sideA,error:this.form.getElementsByTagName("span")[0],text:"Side A"},{side:this.form.sideB,error:this.form.getElementsByTagName("span")[1],text:"Side B"},{side:this.form.sideC,error:this.form.getElementsByTagName("span")[2],text:"Side C"}],this.validations=new i.Validations,this.outputResult=new o.OutputResult(this.output)}return r(e,[{key:"addListeners",value:function(){this.addInputListeners(this.sideArray),this.addSubmitListeners(this.form,this.sideArray,this.sideSet,this.output,this.submitPass)}},{key:"addInputListeners",value:function(e){for(var t=this,n=function(n){e[n].side.onblur=function(){t.validations.triangleValidation(e[n].side,e[n].error,e[n].text)}},r=0;r<e.length;r++)n(r)}},{key:"addSubmitListeners",value:function(e,t,n,r,i){var o=this;e.onsubmit=function(a){a.preventDefault();for(var s=0;s<t.length;s++)o.validations.triangleValidation(t[s].side,t[s].error,t[s].text)&&(i=!1,r.innerHTML="Check the errors young one"),n.add(t[s].side.value);i&&(o.outputResult.outputRun(n.size),e.reset(),document.querySelectorAll(".error").forEach(function(e){e.innerHTML="*Required",e.className="error"}));i=!0,n.clear()}}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.TriangleOutputElement=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._triangleOutput=document.createElement("div"),this._triangleOutput.className="outputContainer",this._triangleOutput.innerHTML='\n      <h2>The Jedi says</h2>\n      <div id="outputBox">I am waiting young padawan</div>'}return r(e,[{key:"triangleOutput",get:function(){return this._triangleOutput}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.TriangleFormElement=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._triangleForm=document.createElement("form"),this._triangleForm.setAttribute("name","triangleForm"),this._triangleForm.setAttribute("class","triangleForm"),this._triangleForm.setAttribute("autocomplete","off"),this._triangleForm.setAttribute("novalidate",""),this._triangleForm.innerHTML='\n      <h2>Tell the master Jedi the value of each side of a triangle</h2>\n      <div class="form-group">\n        <label for="sideA" aria-label="Side A"></label>\n        <input \n          required\n          min="1"\n          type="number"\n          id="sideA"\n          name="sideA"\n          placeholder="Side A">\n        <span id="errorSideA" class="error" aria-live="polite">*Required</span>\n      </div>\n      <div class="form-group">\n        <label for="sideB" aria-label="Side B"></label>\n        <input\n          required\n          min="1"\n          type="number"\n          id="sideB"\n          name="sideB"\n          placeholder="Side B">\n        <span id="errorSideB" class="error" aria-live="polite">*Required</span>\n      </div>\n      <div class="form-group">\n        <label for="sideC" aria-label="Side C"></label>\n        <input\n          required\n          min="1"\n          type="number"\n          id="sideC"\n          name="sideC"\n          placeholder="Side C">\n        <span id="errorSideC" class="error" aria-live="polite">*Required</span>\n      </div>\n      <button class="btn" type="submit">Submit</button>\n    '}return r(e,[{key:"triangleForm",get:function(){return this._triangleForm}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MainElement=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(4),o=n(3),a=n(2);t.MainElement=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.triangleFormElement=new i.TriangleFormElement,this.triangleOutputElement=new o.TriangleOutputElement,this.form=this.triangleFormElement.triangleForm,this.output=this.triangleOutputElement.triangleOutput,this.listeners=new a.Listeners(this.form,this.output),this.listeners.addListeners()}return r(e,[{key:"createSections",value:function(){this.sectionForm=document.createElement("section"),this.sectionForm.className="sectionForm",this.sectionOutput=document.createElement("section"),this.sectionOutput.className="sectionOutput",this.sectionForm.appendChild(this.form),this.sectionOutput.appendChild(this.output)}},{key:"main",get:function(){return this.createSections(),this._main=document.createElement("main"),this._main.appendChild(this.sectionForm),this._main.appendChild(this.sectionOutput),this._main}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.HeaderTitleElement=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._headerTitle=document.createElement("h1"),this._headerTitle.className="headerTitle",this._headerTitle.innerHTML="Triangle Jedi"}return r(e,[{key:"headerTitle",get:function(){return this._headerTitle}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.HeaderTopElement=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._headerTop=document.createElement("div"),this._headerTop.className="headerTop",this._headerTop.innerHTML='\n      <p>\n        <i class="material-icons">fiber_manual_record</i>\n        <i class="material-icons">stop</i>\n        <i class="material-icons">play_arrow</i>\n      </p>'}return r(e,[{key:"headerTop",get:function(){return this._headerTop}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HeaderElement=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(7),o=n(6);t.HeaderElement=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._header=document.createElement("header"),this._headerTopElement=new i.HeaderTopElement,this._headerTitleElement=new o.HeaderTitleElement,this._header.appendChild(this._headerTopElement.headerTop),this._header.appendChild(this._headerTitleElement.headerTitle)}return r(e,[{key:"header",get:function(){return this._header}},{key:"headerTopElement",get:function(){return this._headerTopElement.headerTop}},{key:"headerTitleElement",get:function(){return this._headerTitleElement.headerTitle}}]),e}()},function(e,t,n){e.exports=n.p+"935b0dea8f6914d50c83a2f20e8ee5d5.ico"},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){var r,i,o={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,l=0,c=[],f=n(10);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(y(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(y(r.parts[a],t));o[r.id]={id:r.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,i)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function v(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),b(t,e.attrs),h(e,t),t}function b(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var a=l++;n=u||(u=v(t)),r=w.bind(null,n,a,!1),i=w.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=f(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),i=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var a=n[i];(s=o[a.id]).refs--,r.push(s)}e&&d(p(e,t),t);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete o[s.id]}}}};var g,T=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function w(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=T(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}},,,,function(e,t,n){},function(e,t,n){var r=n(15);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(11)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";n(16);var r,i=n(9),o=(r=i)&&r.__esModule?r:{default:r},a=n(8),s=n(5);var u=o.default;document.getElementById("favicon").setAttribute("href",u);var l=document.querySelector(".app"),c=new s.MainElement,f=new a.HeaderElement;l.appendChild(f.header),l.appendChild(c.main)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,